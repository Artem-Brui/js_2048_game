{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var _this = this;\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        var _this1 = this;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.directions = {\n            right: \"right\",\n            left: \"left\",\n            up: \"up\",\n            down: \"down\"\n        };\n        this.status = {\n            idle: \"idle\",\n            playing: \"playing\",\n            win: \"win\",\n            lose: \"lose\"\n        };\n        this.initialState = initialState;\n        this.state = initialState;\n        this.currentStatus = this.status.idle;\n        this.lastRandomZeroIndex = 0;\n        this.score = 0;\n        this.copyBoard = function(board) {\n            return board.map(function(row) {\n                return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n            });\n        };\n        this.goThroughCells = function(board, callback) {\n            return board.map(function(row) {\n                return row.map(function(n) {\n                    return callback(n);\n                });\n            });\n        };\n        this.getRandomZeroSerialNumber = function(zeros) {\n            var randomNumber;\n            if (zeros > 1) {\n                var getRandomNumber = function() {\n                    return Math.floor(Math.random() * zeros + 1);\n                };\n                do randomNumber = getRandomNumber();\n                while (randomNumber === _this.lastRandomZeroIndex);\n            }\n            _this.lastRandomZeroIndex = randomNumber;\n            return zeros === 1 ? 1 : randomNumber;\n        };\n        this.getNumberToAdd = function(ProbabilityOfFour) {\n            var random = Math.random() * 100 + 1;\n            return random < ProbabilityOfFour ? 4 : 2;\n        };\n        this.getZerosAmount = function(board) {\n            return board.flat().filter(function(number) {\n                return number === 0;\n            }).length;\n        };\n        this.addNumbersToBoard = function() {\n            var numbersAmount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n            var updatedBoard = _this1.copyBoard(_this1.state);\n            var addOneNumber = function(board) {\n                if (_this1.getZerosAmount(board) > 0) {\n                    var numberToAdd = _this1.getNumberToAdd(10);\n                    var zerosAmount = _this1.getZerosAmount(board);\n                    var randomIndex = _this1.getRandomZeroSerialNumber(zerosAmount);\n                    var indexCounter = 0;\n                    updatedBoard = _this1.goThroughCells(board, function(n) {\n                        if (n === 0) indexCounter++;\n                        return randomIndex === indexCounter && n === 0 ? numberToAdd : n;\n                    });\n                    return updatedBoard;\n                }\n            };\n            for(var i = 0; i < numbersAmount; i++){\n                var updatedBoardCopy = _this1.copyBoard(updatedBoard);\n                // console.log(updatedBoard);\n                updatedBoard = addOneNumber(updatedBoardCopy);\n            // console.log(updatedBoard);\n            }\n            return updatedBoard;\n        };\n        this.moveValues = function(direction) {\n            var turnDirection = function(arr) {\n                return arr[0].map(function(_n, rowIndex) {\n                    return arr.map(function(num) {\n                        return num[rowIndex];\n                    });\n                });\n            };\n            var isVertical = direction === _this.directions.up || direction === _this.directions.down;\n            var isRightDownDirection = direction === _this.directions.right || direction === _this.directions.down;\n            var arrayToMove = isVertical ? turnDirection(_this.state) : _this.state;\n            var movedArray = arrayToMove.map(function(row) {\n                var values = isRightDownDirection ? row.filter(function(cell) {\n                    return cell !== 0;\n                }).reverse() : row.filter(function(cell) {\n                    return cell !== 0;\n                });\n                for(var i = 0; i < values.length; i++)if (values[i] === values[i + 1] && values[i] !== 0) {\n                    values[i + 1] = 0;\n                    values[i] *= 2;\n                    _this.score += values[i];\n                }\n                var mergedValues = isRightDownDirection ? values.filter(function(cell) {\n                    return cell !== 0;\n                }).reverse() : values.filter(function(cell) {\n                    return cell !== 0;\n                });\n                var zeros = new Array(4 - mergedValues.length).fill(0);\n                return isRightDownDirection ? (0, $227c6742e0ff6f82$export$71511d61b312f219)(zeros).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(mergedValues)) : (0, $227c6742e0ff6f82$export$71511d61b312f219)(mergedValues).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(zeros));\n            });\n            return isVertical ? turnDirection(movedArray) : movedArray;\n        };\n        this.canVerticalMerge = function() {\n            var isPossible = false;\n            _this.state.forEach(function(row, rowIndex) {\n                row.forEach(function(cell, cellIndex) {\n                    var canVerticalMerge;\n                    if (rowIndex < _this.state.length - 1) canVerticalMerge = cell === _this.state[rowIndex + 1][cellIndex];\n                    if (canVerticalMerge) isPossible = true;\n                });\n            });\n            return isPossible;\n        };\n        this.canHorizontalMerge = function() {\n            var isPossible = false;\n            _this.state.forEach(function(row) {\n                row.forEach(function(cell, cellIndex) {\n                    var canHorizontalMerge;\n                    if (cellIndex < row.length - 1) canHorizontalMerge = cell === row[cellIndex + 1];\n                    if (canHorizontalMerge) isPossible = true;\n                });\n            });\n            return isPossible;\n        };\n        this.isEquelToState = function(board) {\n            var currentBoard = _this.state;\n            return currentBoard.every(function(row, rowIndex) {\n                return row.every(function(cell, cellIndex) {\n                    return cell === board[rowIndex][cellIndex];\n                });\n            });\n        };\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var boardAfterMoving = this.moveValues(this.directions.left);\n                var canMove = this.currentStatus === \"playing\" && !this.isEquelToState(boardAfterMoving);\n                if (canMove) {\n                    this.state = boardAfterMoving;\n                    this.state = this.addNumbersToBoard(1);\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var boardAfterMoving = this.moveValues(this.directions.right);\n                var canMove = this.currentStatus === \"playing\" && !this.isEquelToState(boardAfterMoving);\n                if (canMove) {\n                    this.state = boardAfterMoving;\n                    this.state = this.addNumbersToBoard(1);\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var boardAfterMoving = this.moveValues(this.directions.up);\n                var canMove = this.currentStatus === \"playing\" && !this.isEquelToState(boardAfterMoving);\n                if (canMove) {\n                    this.state = boardAfterMoving;\n                    this.state = this.addNumbersToBoard(1);\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var boardAfterMoving = this.moveValues(this.directions.down);\n                var canMove = this.currentStatus === \"playing\" && !this.isEquelToState(boardAfterMoving);\n                if (canMove) {\n                    this.state = boardAfterMoving;\n                    this.state = this.addNumbersToBoard(1);\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                var isWin = false;\n                var currentStatus = this.currentStatus;\n                var zerosAmount = this.getZerosAmount(this.state);\n                var isMovementExist = this.canVerticalMerge() || this.canHorizontalMerge();\n                this.state.forEach(function(row) {\n                    row.forEach(function(cell) {\n                        if (cell === 2048) isWin = true;\n                    });\n                });\n                var isLose = zerosAmount === 0 && !isMovementExist;\n                if (isWin) currentStatus = this.status.win;\n                else if (isLose) currentStatus = this.status.lose;\n                return currentStatus;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.currentStatus = \"playing\";\n                this.state = this.addNumbersToBoard(2);\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.currentStatus = \"idle\";\n                this.state = this.initialState;\n                this.score = 0;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\nvar $197cd56b15c33885$var$element = {\n    start: document.querySelector(\".start\"),\n    restart: document.querySelector(\".restart\"),\n    messageWin: document.querySelector(\".message-win\"),\n    messageLose: document.querySelector(\".message-lose\"),\n    messageStart: document.querySelector(\".message-start\"),\n    cells: (0, $227c6742e0ff6f82$export$71511d61b312f219)(document.querySelectorAll(\".field-cell\")),\n    score: document.querySelector(\".game-score\")\n};\nvar $197cd56b15c33885$var$displayBoard = function() {\n    $197cd56b15c33885$var$game.state.forEach(function(row, rowIndex) {\n        var cellIndexCoefficient = rowIndex * 4;\n        row.forEach(function(cell, cellIndex) {\n            var cellElement = $197cd56b15c33885$var$element.cells[cellIndex + cellIndexCoefficient];\n            var value = cell !== 0 ? cell : \"\";\n            var cellClassName = cell === 0 ? \"field-cell\" : \"field-cell field-cell--\".concat(cell);\n            cellElement.textContent = value;\n            cellElement.className = cellClassName;\n        });\n    });\n    $197cd56b15c33885$var$element.score.textContent = $197cd56b15c33885$var$game.score;\n    if ($197cd56b15c33885$var$game.currentStatus === $197cd56b15c33885$var$game.status.playing) $197cd56b15c33885$var$element.messageStart.classList.add(\"hidden\");\n    if ($197cd56b15c33885$var$game.currentStatus === $197cd56b15c33885$var$game.status.win) $197cd56b15c33885$var$element.messageWin.classList.remove(\"hidden\");\n    if ($197cd56b15c33885$var$game.currentStatus === $197cd56b15c33885$var$game.status.lose) $197cd56b15c33885$var$element.messageLose.classList.remove(\"hidden\");\n};\nvar $197cd56b15c33885$var$updateStatus = function() {\n    switch($197cd56b15c33885$var$game.getStatus()){\n        case $197cd56b15c33885$var$game.status.win:\n            $197cd56b15c33885$var$game.currentStatus = $197cd56b15c33885$var$game.status.win;\n            break;\n        case $197cd56b15c33885$var$game.status.lose:\n            $197cd56b15c33885$var$game.currentStatus = $197cd56b15c33885$var$game.status.lose;\n            break;\n        default:\n            break;\n    }\n};\n$197cd56b15c33885$var$element.start.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$element.start.classList.add(\"hidden\");\n    $197cd56b15c33885$var$element.restart.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$displayBoard();\n});\n$197cd56b15c33885$var$element.restart.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$element.restart.classList.add(\"hidden\");\n    $197cd56b15c33885$var$element.start.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$element.start.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$element.messageStart.classList.remove(\"hidden\");\n    document.querySelector(\".message-lose\").className = \"message message-lose hidden\";\n    $197cd56b15c33885$var$element.messageWin.className = \"message message-win hidden\";\n    $197cd56b15c33885$var$displayBoard();\n});\ndocument.addEventListener(\"keydown\", function(ev) {\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n        switch(ev.key){\n            case \"ArrowUp\":\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n            case \"ArrowLeft\":\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n        }\n        $197cd56b15c33885$var$updateStatus();\n        $197cd56b15c33885$var$displayBoard();\n    }\n});\n\n})();\n//# sourceMappingURL=index.35195ad2.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nconst element = {\n  start: document.querySelector('.start'),\n  restart: document.querySelector('.restart'),\n  messageWin: document.querySelector('.message-win'),\n  messageLose: document.querySelector('.message-lose'),\n  messageStart: document.querySelector('.message-start'),\n  cells: [...document.querySelectorAll('.field-cell')],\n  score: document.querySelector('.game-score'),\n};\n\nconst displayBoard = () => {\n  game.state.forEach((row, rowIndex) => {\n    const cellIndexCoefficient = rowIndex * 4;\n\n    row.forEach((cell, cellIndex) => {\n      const cellElement = element.cells[cellIndex + cellIndexCoefficient];\n      const value = cell !== 0 ? cell : '';\n      const cellClassName =\n        cell === 0 ? 'field-cell' : `field-cell field-cell--${cell}`;\n\n      cellElement.textContent = value;\n      cellElement.className = cellClassName;\n    });\n  });\n\n  element.score.textContent = game.score;\n\n  if (game.currentStatus === game.status.playing) {\n    element.messageStart.classList.add('hidden');\n  }\n\n  if (game.currentStatus === game.status.win) {\n    element.messageWin.classList.remove('hidden');\n  }\n\n  if (game.currentStatus === game.status.lose) {\n    element.messageLose.classList.remove('hidden');\n  }\n};\n\nconst updateStatus = () => {\n  switch (game.getStatus()) {\n    case game.status.win:\n      game.currentStatus = game.status.win;\n      break;\n    case game.status.lose:\n      game.currentStatus = game.status.lose;\n      break;\n    default:\n      break;\n  }\n};\n\nelement.start.addEventListener('click', () => {\n  game.start();\n  element.start.classList.add('hidden');\n  element.restart.classList.remove('hidden');\n  displayBoard();\n});\n\nelement.restart.addEventListener('click', () => {\n  game.restart();\n  element.restart.classList.add('hidden');\n  element.start.classList.remove('hidden');\n  element.start.classList.remove('hidden');\n  element.messageStart.classList.remove('hidden');\n\n  document.querySelector('.message-lose').className =\n    'message message-lose hidden';\n\n  element.messageWin.className = 'message message-win hidden';\n\n  displayBoard();\n});\n\ndocument.addEventListener('keydown', (ev) => {\n  if (game.getStatus() === 'playing') {\n    switch (ev.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n    }\n    updateStatus();\n    displayBoard();\n  }\n});\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.directions = {\n      right: 'right',\n      left: 'left',\n      up: 'up',\n      down: 'down',\n    };\n\n    this.status = {\n      idle: 'idle',\n      playing: 'playing',\n      win: 'win',\n      lose: 'lose',\n    };\n    this.initialState = initialState;\n    this.state = initialState;\n    this.currentStatus = this.status.idle;\n    this.lastRandomZeroIndex = 0;\n    this.score = 0;\n\n    this.copyBoard = (board) => board.map((row) => [...row]);\n\n    this.goThroughCells = (board, callback) =>\n      board.map((row) => row.map((n) => callback(n)));\n\n    this.getRandomZeroSerialNumber = (zeros) => {\n      let randomNumber;\n\n      if (zeros > 1) {\n        const getRandomNumber = () => Math.floor(Math.random() * zeros + 1);\n\n        do {\n          randomNumber = getRandomNumber();\n        } while (randomNumber === this.lastRandomZeroIndex);\n      }\n\n      this.lastRandomZeroIndex = randomNumber;\n\n      return zeros === 1 ? 1 : randomNumber;\n    };\n\n    this.getNumberToAdd = (ProbabilityOfFour) => {\n      const random = Math.random() * 100 + 1;\n\n      return random < ProbabilityOfFour ? 4 : 2;\n    };\n\n    this.getZerosAmount = (board) => {\n      return board.flat().filter((number) => number === 0).length;\n    };\n\n    this.addNumbersToBoard = (numbersAmount = 1) => {\n      let updatedBoard = this.copyBoard(this.state);\n\n      const addOneNumber = (board) => {\n        if (this.getZerosAmount(board) > 0) {\n          const numberToAdd = this.getNumberToAdd(10);\n          const zerosAmount = this.getZerosAmount(board);\n\n          const randomIndex = this.getRandomZeroSerialNumber(zerosAmount);\n          let indexCounter = 0;\n\n          updatedBoard = this.goThroughCells(board, (n) => {\n            if (n === 0) {\n              indexCounter++;\n            }\n\n            return randomIndex === indexCounter && n === 0 ? numberToAdd : n;\n          });\n\n          return updatedBoard;\n        }\n      };\n\n      for (let i = 0; i < numbersAmount; i++) {\n        const updatedBoardCopy = this.copyBoard(updatedBoard);\n        // console.log(updatedBoard);\n\n        updatedBoard = addOneNumber(updatedBoardCopy);\n\n        // console.log(updatedBoard);\n      }\n\n      return updatedBoard;\n    };\n\n    this.moveValues = (direction) => {\n      const turnDirection = (arr) => {\n        return arr[0].map((_n, rowIndex) => arr.map((num) => num[rowIndex]));\n      };\n\n      const isVertical =\n        direction === this.directions.up || direction === this.directions.down;\n      const isRightDownDirection =\n        direction === this.directions.right ||\n        direction === this.directions.down;\n\n      const arrayToMove = isVertical ? turnDirection(this.state) : this.state;\n\n      const movedArray = arrayToMove.map((row) => {\n        const values = isRightDownDirection\n          ? row.filter((cell) => cell !== 0).reverse()\n          : row.filter((cell) => cell !== 0);\n\n        for (let i = 0; i < values.length; i++) {\n          if (values[i] === values[i + 1] && values[i] !== 0) {\n            values[i + 1] = 0;\n            values[i] *= 2;\n\n            this.score += values[i];\n          }\n        }\n\n        const mergedValues = isRightDownDirection\n          ? values.filter((cell) => cell !== 0).reverse()\n          : values.filter((cell) => cell !== 0);\n\n        const zeros = new Array(4 - mergedValues.length).fill(0);\n\n        return isRightDownDirection\n          ? [...zeros, ...mergedValues]\n          : [...mergedValues, ...zeros];\n      });\n\n      return isVertical ? turnDirection(movedArray) : movedArray;\n    };\n\n    this.canVerticalMerge = () => {\n      let isPossible = false;\n\n      this.state.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n          let canVerticalMerge;\n\n          if (rowIndex < this.state.length - 1) {\n            canVerticalMerge = cell === this.state[rowIndex + 1][cellIndex];\n          }\n\n          if (canVerticalMerge) {\n            isPossible = true;\n          }\n        });\n      });\n\n      return isPossible;\n    };\n\n    this.canHorizontalMerge = () => {\n      let isPossible = false;\n\n      this.state.forEach((row) => {\n        row.forEach((cell, cellIndex) => {\n          let canHorizontalMerge;\n\n          if (cellIndex < row.length - 1) {\n            canHorizontalMerge = cell === row[cellIndex + 1];\n          }\n\n          if (canHorizontalMerge) {\n            isPossible = true;\n          }\n        });\n      });\n\n      return isPossible;\n    };\n\n    this.isEquelToState = (board) => {\n      const currentBoard = this.state;\n\n      return currentBoard.every((row, rowIndex) => {\n        return row.every((cell, cellIndex) => {\n          return cell === board[rowIndex][cellIndex];\n        });\n      });\n    };\n  }\n\n  moveLeft() {\n    const boardAfterMoving = this.moveValues(this.directions.left);\n\n    const canMove =\n      this.currentStatus === 'playing' &&\n      !this.isEquelToState(boardAfterMoving);\n\n    if (canMove) {\n      this.state = boardAfterMoving;\n      this.state = this.addNumbersToBoard(1);\n    }\n  }\n  moveRight() {\n    const boardAfterMoving = this.moveValues(this.directions.right);\n\n    const canMove =\n      this.currentStatus === 'playing' &&\n      !this.isEquelToState(boardAfterMoving);\n\n    if (canMove) {\n      this.state = boardAfterMoving;\n      this.state = this.addNumbersToBoard(1);\n    }\n  }\n\n  moveUp() {\n    const boardAfterMoving = this.moveValues(this.directions.up);\n\n    const canMove =\n      this.currentStatus === 'playing' &&\n      !this.isEquelToState(boardAfterMoving);\n\n    if (canMove) {\n      this.state = boardAfterMoving;\n      this.state = this.addNumbersToBoard(1);\n    }\n  }\n  moveDown() {\n    const boardAfterMoving = this.moveValues(this.directions.down);\n\n    const canMove =\n      this.currentStatus === 'playing' &&\n      !this.isEquelToState(boardAfterMoving);\n\n    if (canMove) {\n      this.state = boardAfterMoving;\n      this.state = this.addNumbersToBoard(1);\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    let isWin = false;\n    let currentStatus = this.currentStatus;\n    const zerosAmount = this.getZerosAmount(this.state);\n    const isMovementExist =\n      this.canVerticalMerge() || this.canHorizontalMerge();\n\n    this.state.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell === 2048) {\n          isWin = true;\n        }\n      });\n    });\n\n    const isLose = zerosAmount === 0 && !isMovementExist;\n\n    if (isWin) {\n      currentStatus = this.status.win;\n    } else if (isLose) {\n      currentStatus = this.status.lose;\n    }\n\n    return currentStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.currentStatus = 'playing';\n    this.state = this.addNumbersToBoard(2);\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.currentStatus = 'idle';\n    this.state = this.initialState;\n    this.score = 0;\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","_this","initialState","arguments","_this1","instance","Constructor","directions","right","left","up","down","status","idle","playing","win","lose","state","currentStatus","lastRandomZeroIndex","score","copyBoard","board","map","row","goThroughCells","callback","getRandomZeroSerialNumber","zeros","randomNumber","Math","floor","random","getNumberToAdd","ProbabilityOfFour","getZerosAmount","flat","filter","number","addNumbersToBoard","numbersAmount","updatedBoard","addOneNumber","numberToAdd","zerosAmount","randomIndex","indexCounter","moveValues","direction","turnDirection","_n","rowIndex","num","isVertical","isRightDownDirection","movedArray","arrayToMove","values","cell","reverse","mergedValues","fill","concat","canVerticalMerge","isPossible","forEach","cellIndex","canHorizontalMerge","isEquelToState","currentBoard","every","key","value","boardAfterMoving","isWin","isMovementExist","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$element","start","document","querySelector","restart","messageWin","messageLose","messageStart","cells","querySelectorAll","$197cd56b15c33885$var$displayBoard","cellIndexCoefficient","cellElement","textContent","className","classList","add","remove","$197cd56b15c33885$var$updateStatus","getStatus","addEventListener","ev","moveUp","moveDown","moveLeft","moveRight"],"version":3,"file":"index.35195ad2.js.map"}