{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.directions = {\n            right: \"right\",\n            left: \"left\",\n            up: \"up\",\n            down: \"down\"\n        };\n        this.status = {\n            idle: \"idle\",\n            playing: \"playing\",\n            win: \"win\",\n            lose: \"lose\"\n        };\n        this.initialState = initialState;\n        this.state = initialState;\n        this.currentStatus = this.status.idle;\n        this.lastRandomZeroIndex = 0;\n        this.score = 0;\n        this.copyBoard = (board)=>board.map((row)=>[\n                    ...row\n                ]);\n        this.goThroughCells = (board, callback)=>board.map((row)=>row.map((n)=>callback(n)));\n        this.getRandomZeroSerialNumber = (zeros)=>{\n            let randomNumber;\n            if (zeros > 1) {\n                const getRandomNumber = ()=>Math.floor(Math.random() * zeros + 1);\n                do randomNumber = getRandomNumber();\n                while (randomNumber === this.lastRandomZeroIndex);\n            }\n            this.lastRandomZeroIndex = randomNumber;\n            return zeros === 1 ? 1 : randomNumber;\n        };\n        this.getNumberToAdd = (ProbabilityOfFour)=>{\n            const random = Math.random() * 100 + 1;\n            return random < ProbabilityOfFour ? 4 : 2;\n        };\n        this.getZerosAmount = (board)=>{\n            return board.flat().filter((number)=>number === 0).length;\n        };\n        this.addNumbersToBoard = (numbersAmount = 1)=>{\n            let updatedBoard = this.copyBoard(this.state);\n            const addOneNumber = (board)=>{\n                if (this.getZerosAmount(board) > 0) {\n                    const numberToAdd = this.getNumberToAdd(10);\n                    const zerosAmount = this.getZerosAmount(board);\n                    const randomIndex = this.getRandomZeroSerialNumber(zerosAmount);\n                    let indexCounter = 0;\n                    updatedBoard = this.goThroughCells(board, (n)=>{\n                        if (n === 0) indexCounter++;\n                        return randomIndex === indexCounter && n === 0 ? numberToAdd : n;\n                    });\n                    return updatedBoard;\n                }\n            };\n            for(let i = 0; i < numbersAmount; i++){\n                const updatedBoardCopy = this.copyBoard(updatedBoard);\n                // console.log(updatedBoard);\n                updatedBoard = addOneNumber(updatedBoardCopy);\n            // console.log(updatedBoard);\n            }\n            return updatedBoard;\n        };\n        this.moveValues = (direction)=>{\n            const turnDirection = (arr)=>{\n                return arr[0].map((_n, rowIndex)=>arr.map((num)=>num[rowIndex]));\n            };\n            const isVertical = direction === this.directions.up || direction === this.directions.down;\n            const isRightDownDirection = direction === this.directions.right || direction === this.directions.down;\n            const arrayToMove = isVertical ? turnDirection(this.state) : this.state;\n            const movedArray = arrayToMove.map((row)=>{\n                const values = isRightDownDirection ? row.filter((cell)=>cell !== 0).reverse() : row.filter((cell)=>cell !== 0);\n                for(let i = 0; i < values.length; i++)if (values[i] === values[i + 1] && values[i] !== 0) {\n                    values[i + 1] = 0;\n                    values[i] *= 2;\n                    this.score += values[i];\n                }\n                const mergedValues = isRightDownDirection ? values.filter((cell)=>cell !== 0).reverse() : values.filter((cell)=>cell !== 0);\n                const zeros = new Array(4 - mergedValues.length).fill(0);\n                return isRightDownDirection ? [\n                    ...zeros,\n                    ...mergedValues\n                ] : [\n                    ...mergedValues,\n                    ...zeros\n                ];\n            });\n            return isVertical ? turnDirection(movedArray) : movedArray;\n        };\n        this.canVerticalMerge = ()=>{\n            let isPossible = false;\n            this.state.forEach((row, rowIndex)=>{\n                row.forEach((cell, cellIndex)=>{\n                    let canVerticalMerge;\n                    if (rowIndex < this.state.length - 1) canVerticalMerge = cell === this.state[rowIndex + 1][cellIndex];\n                    if (canVerticalMerge) isPossible = true;\n                });\n            });\n            return isPossible;\n        };\n        this.canHorizontalMerge = ()=>{\n            let isPossible = false;\n            this.state.forEach((row)=>{\n                row.forEach((cell, cellIndex)=>{\n                    let canHorizontalMerge;\n                    if (cellIndex < row.length - 1) canHorizontalMerge = cell === row[cellIndex + 1];\n                    if (canHorizontalMerge) isPossible = true;\n                });\n            });\n            return isPossible;\n        };\n        this.isEquelToState = (board)=>{\n            const currentBoard = this.state;\n            return currentBoard.every((row, rowIndex)=>{\n                return row.every((cell, cellIndex)=>{\n                    return cell === board[rowIndex][cellIndex];\n                });\n            });\n        };\n    }\n    moveLeft() {\n        const boardAfterMoving = this.moveValues(this.directions.left);\n        const canMove = this.currentStatus === \"playing\" && !this.isEquelToState(boardAfterMoving);\n        if (canMove) {\n            this.state = boardAfterMoving;\n            this.state = this.addNumbersToBoard(1);\n        }\n    }\n    moveRight() {\n        const boardAfterMoving = this.moveValues(this.directions.right);\n        const canMove = this.currentStatus === \"playing\" && !this.isEquelToState(boardAfterMoving);\n        if (canMove) {\n            this.state = boardAfterMoving;\n            this.state = this.addNumbersToBoard(1);\n        }\n    }\n    moveUp() {\n        const boardAfterMoving = this.moveValues(this.directions.up);\n        const canMove = this.currentStatus === \"playing\" && !this.isEquelToState(boardAfterMoving);\n        if (canMove) {\n            this.state = boardAfterMoving;\n            this.state = this.addNumbersToBoard(1);\n        }\n    }\n    moveDown() {\n        const boardAfterMoving = this.moveValues(this.directions.down);\n        const canMove = this.currentStatus === \"playing\" && !this.isEquelToState(boardAfterMoving);\n        if (canMove) {\n            this.state = boardAfterMoving;\n            this.state = this.addNumbersToBoard(1);\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        let isWin = false;\n        let currentStatus = this.currentStatus;\n        const zerosAmount = this.getZerosAmount(this.state);\n        const isMovementExist = this.canVerticalMerge() || this.canHorizontalMerge();\n        this.state.forEach((row)=>{\n            row.forEach((cell)=>{\n                if (cell === 2048) isWin = true;\n            });\n        });\n        const isLose = zerosAmount === 0 && !isMovementExist;\n        if (isWin) currentStatus = this.status.win;\n        else if (isLose) currentStatus = this.status.lose;\n        return currentStatus;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.currentStatus = \"playing\";\n        this.state = this.addNumbersToBoard(2);\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.currentStatus = \"idle\";\n        this.state = this.initialState;\n        this.score = 0;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$element = {\n    start: document.querySelector(\".start\"),\n    restart: document.querySelector(\".restart\"),\n    messageWin: document.querySelector(\".message-win\"),\n    messageLose: document.querySelector(\".message-lose\"),\n    messageStart: document.querySelector(\".message-start\"),\n    cells: [\n        ...document.querySelectorAll(\".field-cell\")\n    ],\n    score: document.querySelector(\".game-score\")\n};\nconst $09e991522ca7e64e$var$displayBoard = ()=>{\n    $09e991522ca7e64e$var$game.state.forEach((row, rowIndex)=>{\n        const cellIndexCoefficient = rowIndex * 4;\n        row.forEach((cell, cellIndex)=>{\n            const cellElement = $09e991522ca7e64e$var$element.cells[cellIndex + cellIndexCoefficient];\n            const value = cell !== 0 ? cell : \"\";\n            const cellClassName = cell === 0 ? \"field-cell\" : `field-cell field-cell--${cell}`;\n            cellElement.textContent = value;\n            cellElement.className = cellClassName;\n        });\n    });\n    $09e991522ca7e64e$var$element.score.textContent = $09e991522ca7e64e$var$game.score;\n    if ($09e991522ca7e64e$var$game.currentStatus === $09e991522ca7e64e$var$game.status.playing) $09e991522ca7e64e$var$element.messageStart.classList.add(\"hidden\");\n    if ($09e991522ca7e64e$var$game.currentStatus === $09e991522ca7e64e$var$game.status.win) $09e991522ca7e64e$var$element.messageWin.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.currentStatus === $09e991522ca7e64e$var$game.status.lose) $09e991522ca7e64e$var$element.messageLose.classList.remove(\"hidden\");\n};\nconst $09e991522ca7e64e$var$updateStatus = ()=>{\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case $09e991522ca7e64e$var$game.status.win:\n            $09e991522ca7e64e$var$game.currentStatus = $09e991522ca7e64e$var$game.status.win;\n            break;\n        case $09e991522ca7e64e$var$game.status.lose:\n            $09e991522ca7e64e$var$game.currentStatus = $09e991522ca7e64e$var$game.status.lose;\n            break;\n        default:\n            break;\n    }\n};\n$09e991522ca7e64e$var$element.start.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$element.start.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$element.restart.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$displayBoard();\n});\n$09e991522ca7e64e$var$element.restart.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$element.restart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$element.start.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$element.start.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$element.messageStart.classList.remove(\"hidden\");\n    document.querySelector(\".message-lose\").className = \"message message-lose hidden\";\n    $09e991522ca7e64e$var$element.messageWin.className = \"message message-win hidden\";\n    $09e991522ca7e64e$var$displayBoard();\n});\ndocument.addEventListener(\"keydown\", (ev)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(ev.key){\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n        }\n        $09e991522ca7e64e$var$updateStatus();\n        $09e991522ca7e64e$var$displayBoard();\n    }\n});\n\n\n//# sourceMappingURL=index.ef4768ea.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nconst element = {\n  start: document.querySelector('.start'),\n  restart: document.querySelector('.restart'),\n  messageWin: document.querySelector('.message-win'),\n  messageLose: document.querySelector('.message-lose'),\n  messageStart: document.querySelector('.message-start'),\n  cells: [...document.querySelectorAll('.field-cell')],\n  score: document.querySelector('.game-score'),\n};\n\nconst displayBoard = () => {\n  game.state.forEach((row, rowIndex) => {\n    const cellIndexCoefficient = rowIndex * 4;\n\n    row.forEach((cell, cellIndex) => {\n      const cellElement = element.cells[cellIndex + cellIndexCoefficient];\n      const value = cell !== 0 ? cell : '';\n      const cellClassName =\n        cell === 0 ? 'field-cell' : `field-cell field-cell--${cell}`;\n\n      cellElement.textContent = value;\n      cellElement.className = cellClassName;\n    });\n  });\n\n  element.score.textContent = game.score;\n\n  if (game.currentStatus === game.status.playing) {\n    element.messageStart.classList.add('hidden');\n  }\n\n  if (game.currentStatus === game.status.win) {\n    element.messageWin.classList.remove('hidden');\n  }\n\n  if (game.currentStatus === game.status.lose) {\n    element.messageLose.classList.remove('hidden');\n  }\n};\n\nconst updateStatus = () => {\n  switch (game.getStatus()) {\n    case game.status.win:\n      game.currentStatus = game.status.win;\n      break;\n    case game.status.lose:\n      game.currentStatus = game.status.lose;\n      break;\n    default:\n      break;\n  }\n};\n\nelement.start.addEventListener('click', () => {\n  game.start();\n  element.start.classList.add('hidden');\n  element.restart.classList.remove('hidden');\n  displayBoard();\n});\n\nelement.restart.addEventListener('click', () => {\n  game.restart();\n  element.restart.classList.add('hidden');\n  element.start.classList.remove('hidden');\n  element.start.classList.remove('hidden');\n  element.messageStart.classList.remove('hidden');\n\n  document.querySelector('.message-lose').className =\n    'message message-lose hidden';\n\n  element.messageWin.className = 'message message-win hidden';\n\n  displayBoard();\n});\n\ndocument.addEventListener('keydown', (ev) => {\n  if (game.getStatus() === 'playing') {\n    switch (ev.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n    }\n    updateStatus();\n    displayBoard();\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.directions = {\n      right: 'right',\n      left: 'left',\n      up: 'up',\n      down: 'down',\n    };\n\n    this.status = {\n      idle: 'idle',\n      playing: 'playing',\n      win: 'win',\n      lose: 'lose',\n    };\n    this.initialState = initialState;\n    this.state = initialState;\n    this.currentStatus = this.status.idle;\n    this.lastRandomZeroIndex = 0;\n    this.score = 0;\n\n    this.copyBoard = (board) => board.map((row) => [...row]);\n\n    this.goThroughCells = (board, callback) =>\n      board.map((row) => row.map((n) => callback(n)));\n\n    this.getRandomZeroSerialNumber = (zeros) => {\n      let randomNumber;\n\n      if (zeros > 1) {\n        const getRandomNumber = () => Math.floor(Math.random() * zeros + 1);\n\n        do {\n          randomNumber = getRandomNumber();\n        } while (randomNumber === this.lastRandomZeroIndex);\n      }\n\n      this.lastRandomZeroIndex = randomNumber;\n\n      return zeros === 1 ? 1 : randomNumber;\n    };\n\n    this.getNumberToAdd = (ProbabilityOfFour) => {\n      const random = Math.random() * 100 + 1;\n\n      return random < ProbabilityOfFour ? 4 : 2;\n    };\n\n    this.getZerosAmount = (board) => {\n      return board.flat().filter((number) => number === 0).length;\n    };\n\n    this.addNumbersToBoard = (numbersAmount = 1) => {\n      let updatedBoard = this.copyBoard(this.state);\n\n      const addOneNumber = (board) => {\n        if (this.getZerosAmount(board) > 0) {\n          const numberToAdd = this.getNumberToAdd(10);\n          const zerosAmount = this.getZerosAmount(board);\n\n          const randomIndex = this.getRandomZeroSerialNumber(zerosAmount);\n          let indexCounter = 0;\n\n          updatedBoard = this.goThroughCells(board, (n) => {\n            if (n === 0) {\n              indexCounter++;\n            }\n\n            return randomIndex === indexCounter && n === 0 ? numberToAdd : n;\n          });\n\n          return updatedBoard;\n        }\n      };\n\n      for (let i = 0; i < numbersAmount; i++) {\n        const updatedBoardCopy = this.copyBoard(updatedBoard);\n        // console.log(updatedBoard);\n\n        updatedBoard = addOneNumber(updatedBoardCopy);\n\n        // console.log(updatedBoard);\n      }\n\n      return updatedBoard;\n    };\n\n    this.moveValues = (direction) => {\n      const turnDirection = (arr) => {\n        return arr[0].map((_n, rowIndex) => arr.map((num) => num[rowIndex]));\n      };\n\n      const isVertical =\n        direction === this.directions.up || direction === this.directions.down;\n      const isRightDownDirection =\n        direction === this.directions.right ||\n        direction === this.directions.down;\n\n      const arrayToMove = isVertical ? turnDirection(this.state) : this.state;\n\n      const movedArray = arrayToMove.map((row) => {\n        const values = isRightDownDirection\n          ? row.filter((cell) => cell !== 0).reverse()\n          : row.filter((cell) => cell !== 0);\n\n        for (let i = 0; i < values.length; i++) {\n          if (values[i] === values[i + 1] && values[i] !== 0) {\n            values[i + 1] = 0;\n            values[i] *= 2;\n\n            this.score += values[i];\n          }\n        }\n\n        const mergedValues = isRightDownDirection\n          ? values.filter((cell) => cell !== 0).reverse()\n          : values.filter((cell) => cell !== 0);\n\n        const zeros = new Array(4 - mergedValues.length).fill(0);\n\n        return isRightDownDirection\n          ? [...zeros, ...mergedValues]\n          : [...mergedValues, ...zeros];\n      });\n\n      return isVertical ? turnDirection(movedArray) : movedArray;\n    };\n\n    this.canVerticalMerge = () => {\n      let isPossible = false;\n\n      this.state.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n          let canVerticalMerge;\n\n          if (rowIndex < this.state.length - 1) {\n            canVerticalMerge = cell === this.state[rowIndex + 1][cellIndex];\n          }\n\n          if (canVerticalMerge) {\n            isPossible = true;\n          }\n        });\n      });\n\n      return isPossible;\n    };\n\n    this.canHorizontalMerge = () => {\n      let isPossible = false;\n\n      this.state.forEach((row) => {\n        row.forEach((cell, cellIndex) => {\n          let canHorizontalMerge;\n\n          if (cellIndex < row.length - 1) {\n            canHorizontalMerge = cell === row[cellIndex + 1];\n          }\n\n          if (canHorizontalMerge) {\n            isPossible = true;\n          }\n        });\n      });\n\n      return isPossible;\n    };\n\n    this.isEquelToState = (board) => {\n      const currentBoard = this.state;\n\n      return currentBoard.every((row, rowIndex) => {\n        return row.every((cell, cellIndex) => {\n          return cell === board[rowIndex][cellIndex];\n        });\n      });\n    };\n  }\n\n  moveLeft() {\n    const boardAfterMoving = this.moveValues(this.directions.left);\n\n    const canMove =\n      this.currentStatus === 'playing' &&\n      !this.isEquelToState(boardAfterMoving);\n\n    if (canMove) {\n      this.state = boardAfterMoving;\n      this.state = this.addNumbersToBoard(1);\n    }\n  }\n  moveRight() {\n    const boardAfterMoving = this.moveValues(this.directions.right);\n\n    const canMove =\n      this.currentStatus === 'playing' &&\n      !this.isEquelToState(boardAfterMoving);\n\n    if (canMove) {\n      this.state = boardAfterMoving;\n      this.state = this.addNumbersToBoard(1);\n    }\n  }\n\n  moveUp() {\n    const boardAfterMoving = this.moveValues(this.directions.up);\n\n    const canMove =\n      this.currentStatus === 'playing' &&\n      !this.isEquelToState(boardAfterMoving);\n\n    if (canMove) {\n      this.state = boardAfterMoving;\n      this.state = this.addNumbersToBoard(1);\n    }\n  }\n  moveDown() {\n    const boardAfterMoving = this.moveValues(this.directions.down);\n\n    const canMove =\n      this.currentStatus === 'playing' &&\n      !this.isEquelToState(boardAfterMoving);\n\n    if (canMove) {\n      this.state = boardAfterMoving;\n      this.state = this.addNumbersToBoard(1);\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    let isWin = false;\n    let currentStatus = this.currentStatus;\n    const zerosAmount = this.getZerosAmount(this.state);\n    const isMovementExist =\n      this.canVerticalMerge() || this.canHorizontalMerge();\n\n    this.state.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell === 2048) {\n          isWin = true;\n        }\n      });\n    });\n\n    const isLose = zerosAmount === 0 && !isMovementExist;\n\n    if (isWin) {\n      currentStatus = this.status.win;\n    } else if (isLose) {\n      currentStatus = this.status.lose;\n    }\n\n    return currentStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.currentStatus = 'playing';\n    this.state = this.addNumbersToBoard(2);\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.currentStatus = 'idle';\n    this.state = this.initialState;\n    this.score = 0;\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","directions","right","left","up","down","status","idle","playing","win","lose","state","currentStatus","lastRandomZeroIndex","score","copyBoard","board","map","row","goThroughCells","callback","n","getRandomZeroSerialNumber","zeros","randomNumber","getRandomNumber","Math","floor","random","getNumberToAdd","ProbabilityOfFour","getZerosAmount","flat","filter","number","length","addNumbersToBoard","numbersAmount","updatedBoard","addOneNumber","numberToAdd","zerosAmount","randomIndex","indexCounter","i","moveValues","direction","turnDirection","arr","_n","rowIndex","num","isVertical","isRightDownDirection","movedArray","arrayToMove","values","cell","reverse","mergedValues","Array","fill","canVerticalMerge","isPossible","forEach","cellIndex","canHorizontalMerge","isEquelToState","currentBoard","every","moveLeft","boardAfterMoving","moveRight","moveUp","moveDown","getScore","getState","getStatus","isWin","isMovementExist","start","restart","$09e991522ca7e64e$var$element","document","querySelector","messageWin","messageLose","messageStart","cells","querySelectorAll","$09e991522ca7e64e$var$displayBoard","cellIndexCoefficient","cellElement","cellClassName","textContent","className","classList","add","remove","$09e991522ca7e64e$var$updateStatus","addEventListener","ev","key"],"version":3,"file":"index.ef4768ea.js.map"}